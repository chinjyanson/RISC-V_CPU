$version Generated by VerilatedVcd $end
$date Mon Dec  4 22:33:47 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 A a0 [31:0] $end
  $var wire  1 ? clk $end
  $var wire  1 @ rst $end
  $scope module cpu $end
   $var wire 32 F ADDRESS_WIDTH [31:0] $end
   $var wire  3 5 ALUctrl [2:0] $end
   $var wire  1 6 ALUsrc $end
   $var wire 32 H CONTROL_WIDTH [31:0] $end
   $var wire 32 G DATA_WIDTH [31:0] $end
   $var wire 32 I IMM_WIDTH [31:0] $end
   $var wire 32 8 ImmOp [31:0] $end
   $var wire 32 # Instr [31:0] $end
   $var wire  1 4 MemWrite $end
   $var wire  8 $ PC [7:0] $end
   $var wire 32 % PCPlus4 [31:0] $end
   $var wire  2 9 PCsrc [1:0] $end
   $var wire  1 3 RegWrite $end
   $var wire 32 C Result [31:0] $end
   $var wire  2 7 Resultsrc [1:0] $end
   $var wire  1 B Zero $end
   $var wire 32 A a0 [31:0] $end
   $var wire  1 ? clk $end
   $var wire  1 @ rst $end
   $scope module alu $end
    $var wire 32 : ALUResult_o [31:0] $end
    $var wire  3 5 ALUctrl_i [2:0] $end
    $var wire  1 6 ALUsrc_i $end
    $var wire 32 H CONTROL_WIDTH [31:0] $end
    $var wire 32 G DATA_WIDTH [31:0] $end
    $var wire 32 8 ImmOp_i [31:0] $end
    $var wire 32 # Instr_i [31:0] $end
    $var wire  1 4 MemWrite_i $end
    $var wire 32 % PCPlus4_i [31:0] $end
    $var wire 32 D ReadData [31:0] $end
    $var wire  1 3 RegWrite_i $end
    $var wire  2 7 ResultSrc_i [1:0] $end
    $var wire 32 C Result_o [31:0] $end
    $var wire 32 & SrcA [31:0] $end
    $var wire 32 ; SrcB [31:0] $end
    $var wire  1 B Zero_o $end
    $var wire 32 A a0 [31:0] $end
    $var wire  1 ? clk $end
    $var wire 32 ' regOp2 [31:0] $end
    $scope module ALU $end
     $var wire 32 : ALUResult [31:0] $end
     $var wire  3 5 ALUctrl [2:0] $end
     $var wire 32 H CONTROL_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire 32 & SrcA [31:0] $end
     $var wire 32 ; SrcB [31:0] $end
     $var wire  1 B Zero $end
    $upscope $end
    $scope module ALUMux $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire  1 6 control $end
     $var wire 32 ' input0 [31:0] $end
     $var wire 32 8 input1 [31:0] $end
     $var wire 32 ; out [31:0] $end
    $upscope $end
    $scope module data $end
     $var wire  8 < A [7:0] $end
     $var wire 32 F ADDRESS_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire 32 D RD [31:0] $end
     $var wire 32 ' WD [31:0] $end
     $var wire  1 4 WE $end
     $var wire  1 ? clk $end
    $upscope $end
    $scope module register $end
     $var wire  8 ) A1 [7:0] $end
     $var wire  8 ( A2 [7:0] $end
     $var wire  8 * A3 [7:0] $end
     $var wire 32 F ADDRESS_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire 32 # Instr [31:0] $end
     $var wire 32 & RD1 [31:0] $end
     $var wire 32 ' RD2 [31:0] $end
     $var wire 32 : WD3 [31:0] $end
     $var wire  1 3 WE3 $end
     $var wire 32 A a0 [31:0] $end
     $var wire  1 ? clk $end
    $upscope $end
    $scope module resultMux $end
     $var wire 32 I CONTROL_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire  2 7 control [1:0] $end
     $var wire 32 D input0 [31:0] $end
     $var wire 32 : input1 [31:0] $end
     $var wire 32 % input2 [31:0] $end
     $var wire 32 J input3 [31:0] $end
     $var wire 32 C out [31:0] $end
    $upscope $end
   $upscope $end
   $scope module control $end
    $var wire 32 F ADDRESS_WIDTH [31:0] $end
    $var wire  3 5 ALUctrl_o [2:0] $end
    $var wire  1 6 ALUsrc_o $end
    $var wire 32 H CONTROL_WIDTH [31:0] $end
    $var wire 32 G DATA_WIDTH [31:0] $end
    $var wire 32 I IMM_WIDTH [31:0] $end
    $var wire 32 8 ImmOp_o [31:0] $end
    $var wire  2 = ImmSrc [1:0] $end
    $var wire  1 4 MemWrite_o $end
    $var wire  8 $ PC_i [7:0] $end
    $var wire  2 9 PCsrc_o [1:0] $end
    $var wire  1 3 RegWrite_o $end
    $var wire  2 7 Resultsrc_o [1:0] $end
    $var wire  1 B Zero_i $end
    $var wire 32 # instr_o [31:0] $end
    $scope module ControlUnit $end
     $var wire  3 5 ALUctrl_o [2:0] $end
     $var wire  1 6 ALUsrc_o $end
     $var wire 32 H CONTROL_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire 32 I IMM_WIDTH [31:0] $end
     $var wire  2 = ImmSrc_o [1:0] $end
     $var wire  1 4 MemWrite_o $end
     $var wire  2 9 PCsrc_o [1:0] $end
     $var wire  1 3 RegWrite_o $end
     $var wire  2 7 Resultsrc_o [1:0] $end
     $var wire  1 B Zero_i $end
     $var wire  3 , funct3 [2:0] $end
     $var wire 32 # instr_i [31:0] $end
     $var wire  7 + opcode [6:0] $end
    $upscope $end
    $scope module InstrMem $end
     $var wire 32 F ADDRESS_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire 32 # Instr_o [31:0] $end
     $var wire  8 $ addr_i [7:0] $end
     $var wire  8 - rom_array0 [7:0] $end
     $var wire  8 . rom_array1 [7:0] $end
     $var wire  8 / rom_array2 [7:0] $end
     $var wire  8 0 rom_array3 [7:0] $end
    $upscope $end
    $scope module MySignExtend $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire 32 I IMM_WIDTH [31:0] $end
     $var wire 32 8 ImmOp_o [31:0] $end
     $var wire  2 = ImmSrc_i [1:0] $end
     $var wire 32 # instr_i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module pc $end
    $var wire 32 C ALUResult_i [31:0] $end
    $var wire 32 8 ImmOp_i [31:0] $end
    $var wire 32 2 PC [31:0] $end
    $var wire 32 % PCPlus4_o [31:0] $end
    $var wire 32 E PCTarget [31:0] $end
    $var wire  2 9 PCsrc_i [1:0] $end
    $var wire 32 G WIDTH [31:0] $end
    $var wire  1 ? clk $end
    $var wire 32 > next_PC [31:0] $end
    $var wire 32 1 pc_out [31:0] $end
    $var wire  1 @ rst $end
    $scope module pc_mux $end
     $var wire 32 I CONTROL_WIDTH [31:0] $end
     $var wire 32 G DATA_WIDTH [31:0] $end
     $var wire  2 9 control [1:0] $end
     $var wire 32 % input0 [31:0] $end
     $var wire 32 E input1 [31:0] $end
     $var wire 32 C input2 [31:0] $end
     $var wire 32 K input3 [31:0] $end
     $var wire 32 > out [31:0] $end
    $upscope $end
    $scope module pc_reg $end
     $var wire 32 G WIDTH [31:0] $end
     $var wire 32 1 another_pc [31:0] $end
     $var wire  1 ? clk $end
     $var wire 32 > next_PC [31:0] $end
     $var wire 32 2 pc [31:0] $end
     $var wire  1 @ rst $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000 $
b00000000000000000000000000000100 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000 (
b00000000 )
b00000000 *
b0000000 +
b000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
03
04
b000 5
06
b00 7
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000 <
b00 =
b00000000000000000000000000000000 >
0?
0@
b00000000000000000000000000000000 A
1B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000001000 F
b00000000000000000000000000100000 G
b00000000000000000000000000000011 H
b00000000000000000000000000000010 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
#1
b00001111111100000000001100010011 #
b00011111 (
b00000110 *
b0010011 +
b00010011 -
b00000011 .
b11110000 /
b00001111 0
13
16
b00000000000000000000000011111111 8
b00000000000000000000000011111111 :
b00000000000000000000000011111111 ;
b11111111 <
b01 =
b00000000000000000000000000000100 >
1?
0B
b00000000000000000000000011111111 E
#2
0?
#3
b00000000000000000000010100010011 #
b00000100 $
b00000000000000000000000000001000 %
b00000000 (
b00001010 *
b00000101 .
b00000000 /
b00000000 0
b00000000000000000000000000000100 1
b00000000000000000000000000000100 2
b00000000000000000000000000000000 8
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000 <
b00000000000000000000000000001000 >
1?
1B
b00000000000000000000000011111110 C
b00000000000000000000000011111110 D
b00000000000000000000000000000100 E
#4
0?
#5
b00000000000000000000010110010011 #
b00001000 $
b00000000000000000000000000001100 %
b00001011 *
b10010011 -
b00000000000000000000000000001000 1
b00000000000000000000000000001000 2
b00000000000000000000000000001100 >
1?
b00000000000000000000000000001000 E
#6
0?
#7
b00000000000001011000010100010011 #
b00001100 $
b00000000000000000000000000010000 %
b00001011 )
b00001010 *
b00010011 -
b10000101 .
b00000101 /
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
b00000000000000000000000000010000 >
1?
b00000000000000000000000000001100 E
#8
0?
#9
b00000000000101011000010110010011 #
b00010000 $
b00000000000000000000000000010100 %
b00000001 (
b00001011 *
b10010011 -
b00010101 /
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000000001 8
b00000000000000000000000000000001 :
b00000000000000000000000000000001 ;
b00000001 <
b00000000000000000000000000010100 >
1?
0B
b00000000000000000000000011111101 C
b00000000000000000000000011111101 D
b00000000000000000000000000010001 E
#10
0?
#11
b11111110011001011001110011100011 #
b00010100 $
b00000000000000000000000000011000 %
b00000000000000000000000000000001 &
b00000000000000000000000011111111 '
b00000110 (
b00011001 *
b1100011 +
b001 ,
b11100011 -
b10011100 .
b01100101 /
b11111110 0
b00000000000000000000000000010100 1
b00000000000000000000000000010100 2
03
06
b01 7
b11111111111111111111111111111000 8
b01 9
b00000000000000000000000100000000 :
b00000000000000000000000011111111 ;
b00000000 <
b11 =
b00000000000000000000000000001100 >
1?
b00000000000000000000000100000000 C
b00000000000000000000000011111110 D
b00000000000000000000000000001100 E
#12
0?
#13
b00000000000001011000010100010011 #
b00001100 $
b00000000000000000000000000010000 %
b00000000000000000000000000000000 '
b00000000 (
b00001010 *
b0010011 +
b000 ,
b00010011 -
b10000101 .
b00000101 /
b00000000 0
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
13
16
b00 7
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000001 :
b00000000000000000000000000000000 ;
b00000001 <
b01 =
b00000000000000000000000000010000 >
1?
b00000000000000000000000011111101 C
b00000000000000000000000011111101 D
#14
0?
#15
b00000000000101011000010110010011 #
b00010000 $
b00000000000000000000000000010100 %
b00000001 (
b00001011 *
b10010011 -
b00010101 /
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000000001 8
b00000000000000000000000000000010 :
b00000000000000000000000000000001 ;
b00000010 <
b00000000000000000000000000010100 >
1?
b00000000000000000000000000000001 A
1B
b00000000000000000000000000010001 E
#16
0?
#17
b11111110011001011001110011100011 #
b00010100 $
b00000000000000000000000000011000 %
b00000000000000000000000000000010 &
b00000000000000000000000011111111 '
b00000110 (
b00011001 *
b1100011 +
b001 ,
b11100011 -
b10011100 .
b01100101 /
b11111110 0
b00000000000000000000000000010100 1
b00000000000000000000000000010100 2
03
06
b01 7
b11111111111111111111111111111000 8
b01 9
b00000000000000000000000100000001 :
b00000000000000000000000011111111 ;
b00000001 <
b11 =
b00000000000000000000000000001100 >
1?
0B
b00000000000000000000000100000001 C
b00000000000000000000000000001100 E
#18
0?
#19
b00000000000001011000010100010011 #
b00001100 $
b00000000000000000000000000010000 %
b00000000000000000000000000000000 '
b00000000 (
b00001010 *
b0010011 +
b000 ,
b00010011 -
b10000101 .
b00000101 /
b00000000 0
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
13
16
b00 7
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000010 :
b00000000000000000000000000000000 ;
b00000010 <
b01 =
b00000000000000000000000000010000 >
1?
b00000000000000000000000011111101 C
#20
0?
#21
b00000000000101011000010110010011 #
b00010000 $
b00000000000000000000000000010100 %
b00000001 (
b00001011 *
b10010011 -
b00010101 /
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000000001 8
b00000000000000000000000000000011 :
b00000000000000000000000000000001 ;
b00000011 <
b00000000000000000000000000010100 >
1?
b00000000000000000000000000000010 A
b00000000000000000000000000010001 E
#22
0?
#23
b11111110011001011001110011100011 #
b00010100 $
b00000000000000000000000000011000 %
b00000000000000000000000000000011 &
b00000000000000000000000011111111 '
b00000110 (
b00011001 *
b1100011 +
b001 ,
b11100011 -
b10011100 .
b01100101 /
b11111110 0
b00000000000000000000000000010100 1
b00000000000000000000000000010100 2
03
06
b01 7
b11111111111111111111111111111000 8
b01 9
b00000000000000000000000100000010 :
b00000000000000000000000011111111 ;
b00000010 <
b11 =
b00000000000000000000000000001100 >
1?
b00000000000000000000000100000010 C
b00000000000000000000000000001100 E
#24
0?
#25
b00000000000001011000010100010011 #
b00001100 $
b00000000000000000000000000010000 %
b00000000000000000000000000000000 '
b00000000 (
b00001010 *
b0010011 +
b000 ,
b00010011 -
b10000101 .
b00000101 /
b00000000 0
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
13
16
b00 7
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000011 :
b00000000000000000000000000000000 ;
b00000011 <
b01 =
b00000000000000000000000000010000 >
1?
b00000000000000000000000011111101 C
#26
0?
#27
b00000000000101011000010110010011 #
b00010000 $
b00000000000000000000000000010100 %
b00000001 (
b00001011 *
b10010011 -
b00010101 /
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000000001 8
b00000000000000000000000000000100 :
b00000000000000000000000000000001 ;
b00000100 <
b00000000000000000000000000010100 >
1?
b00000000000000000000000000000011 A
b00000000000000000000000000010001 E
#28
0?
#29
b11111110011001011001110011100011 #
b00010100 $
b00000000000000000000000000011000 %
b00000000000000000000000000000100 &
b00000000000000000000000011111111 '
b00000110 (
b00011001 *
b1100011 +
b001 ,
b11100011 -
b10011100 .
b01100101 /
b11111110 0
b00000000000000000000000000010100 1
b00000000000000000000000000010100 2
03
06
b01 7
b11111111111111111111111111111000 8
b01 9
b00000000000000000000000100000011 :
b00000000000000000000000011111111 ;
b00000011 <
b11 =
b00000000000000000000000000001100 >
1?
b00000000000000000000000100000011 C
b00000000000000000000000000001100 E
#30
0?
#31
b00000000000001011000010100010011 #
b00001100 $
b00000000000000000000000000010000 %
b00000000000000000000000000000000 '
b00000000 (
b00001010 *
b0010011 +
b000 ,
b00010011 -
b10000101 .
b00000101 /
b00000000 0
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
13
16
b00 7
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000100 :
b00000000000000000000000000000000 ;
b00000100 <
b01 =
b00000000000000000000000000010000 >
1?
b00000000000000000000000011111101 C
#32
0?
#33
b00000000000101011000010110010011 #
b00010000 $
b00000000000000000000000000010100 %
b00000001 (
b00001011 *
b10010011 -
b00010101 /
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000000001 8
b00000000000000000000000000000101 :
b00000000000000000000000000000001 ;
b00000101 <
b00000000000000000000000000010100 >
1?
b00000000000000000000000000000100 A
b00000000000000000000000000010001 E
#34
0?
#35
b11111110011001011001110011100011 #
b00010100 $
b00000000000000000000000000011000 %
b00000000000000000000000000000101 &
b00000000000000000000000011111111 '
b00000110 (
b00011001 *
b1100011 +
b001 ,
b11100011 -
b10011100 .
b01100101 /
b11111110 0
b00000000000000000000000000010100 1
b00000000000000000000000000010100 2
03
06
b01 7
b11111111111111111111111111111000 8
b01 9
b00000000000000000000000100000100 :
b00000000000000000000000011111111 ;
b00000100 <
b11 =
b00000000000000000000000000001100 >
1?
b00000000000000000000000100000100 C
b00000000000000000000000000001100 E
#36
0?
#37
b00000000000001011000010100010011 #
b00001100 $
b00000000000000000000000000010000 %
b00000000000000000000000000000000 '
b00000000 (
b00001010 *
b0010011 +
b000 ,
b00010011 -
b10000101 .
b00000101 /
b00000000 0
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
13
16
b00 7
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000101 :
b00000000000000000000000000000000 ;
b00000101 <
b01 =
b00000000000000000000000000010000 >
1?
b00000000000000000000000011111101 C
#38
0?
#39
b00000000000101011000010110010011 #
b00010000 $
b00000000000000000000000000010100 %
b00000001 (
b00001011 *
b10010011 -
b00010101 /
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000000001 8
b00000000000000000000000000000110 :
b00000000000000000000000000000001 ;
b00000110 <
b00000000000000000000000000010100 >
1?
b00000000000000000000000000000101 A
b00000000000000000000000011111100 C
b00000000000000000000000011111100 D
b00000000000000000000000000010001 E
