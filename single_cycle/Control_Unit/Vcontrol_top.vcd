$version Generated by VerilatedVcd $end
$date Sat Dec  2 22:50:06 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  3 , ALUctrl_o [2:0] $end
  $var wire  1 - ALUsrc_o $end
  $var wire 32 / ImmOp_o [31:0] $end
  $var wire  1 * MemWrite_o $end
  $var wire 32 & PC_i [31:0] $end
  $var wire  1 . PCsrc_o $end
  $var wire  1 ) RegWrite_o $end
  $var wire  3 + Resultsrc_o [2:0] $end
  $var wire  1 ' Zero_i $end
  $var wire 32 ( instr_o [31:0] $end
  $scope module control_top $end
   $var wire 32 7 ADDRESS_WIDTH [31:0] $end
   $var wire  3 , ALUctrl_o [2:0] $end
   $var wire  1 - ALUsrc_o $end
   $var wire 32 9 CONTROL_WIDTH [31:0] $end
   $var wire 32 8 DATA_WIDTH [31:0] $end
   $var wire 32 / ImmOp_o [31:0] $end
   $var wire  2 # ImmSrc [1:0] $end
   $var wire  1 * MemWrite_o $end
   $var wire 32 & PC_i [31:0] $end
   $var wire  1 . PCsrc_o $end
   $var wire  1 ) RegWrite_o $end
   $var wire  3 + Resultsrc_o [2:0] $end
   $var wire  1 ' Zero_i $end
   $var wire 32 ( instr_o [31:0] $end
   $scope module ControlUnit $end
    $var wire  3 , ALUctrl_o [2:0] $end
    $var wire  1 - ALUsrc_o $end
    $var wire 32 9 CONTROL_WIDTH [31:0] $end
    $var wire 32 8 DATA_WIDTH [31:0] $end
    $var wire 32 : IMM_WIDTH [31:0] $end
    $var wire  2 # ImmSrc_o [1:0] $end
    $var wire  1 * MemWrite_o $end
    $var wire  2 % PCsrc_o [1:0] $end
    $var wire  1 ) RegWrite_o $end
    $var wire  2 $ Resultsrc_o [1:0] $end
    $var wire  1 ' Zero_i $end
    $var wire  3 1 funct3 [2:0] $end
    $var wire 32 ( instr_i [31:0] $end
    $var wire  7 0 opcode [6:0] $end
   $upscope $end
   $scope module InstrMem $end
    $var wire 32 7 ADDRESS_WIDTH [31:0] $end
    $var wire 32 8 DATA_WIDTH [31:0] $end
    $var wire 32 ( Instr_o [31:0] $end
    $var wire  8 2 addr_i [7:0] $end
    $var wire  8 3 rom_array0 [7:0] $end
    $var wire  8 4 rom_array1 [7:0] $end
    $var wire  8 5 rom_array2 [7:0] $end
    $var wire  8 6 rom_array3 [7:0] $end
   $upscope $end
   $scope module MySignExtend $end
    $var wire 32 8 DATA_WIDTH [31:0] $end
    $var wire 32 : IMM_WIDTH [31:0] $end
    $var wire 32 / ImmOp_o [31:0] $end
    $var wire  2 # ImmSrc_i [1:0] $end
    $var wire 32 ( instr_i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00 #
b00 $
b00 %
b00000000000000000000000000000000 &
0'
b00000000000000000000000000000000 (
0)
0*
b000 +
b000 ,
0-
0.
b00000000000000000000000000000000 /
b0000000 0
b000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000000000000000000000001000 7
b00000000000000000000000000100000 8
b00000000000000000000000000000011 9
b00000000000000000000000000000010 :
#2
b01 #
b00001111111100000000001100010011 (
1)
1-
b00000000000000000000000011111111 /
b0010011 0
b00010011 3
b00000011 4
b11110000 5
b00001111 6
#4
b00000000000000000000000000000100 &
b00000100 2
b00000101 4
b00000000 5
b00000000 6
#6
b00000000000000000000000000001000 &
b00000000000000000000010100010011 (
b00000000000000000000000000000000 /
b00001000 2
b10010011 3
#8
b00000000000000000000000000001100 &
b00000000000000000000010110010011 (
b00001100 2
b00010011 3
b10000101 4
b00000101 5
#10
b00000000000000000000000000010000 &
b00000000000001011000010100010011 (
b00010000 2
b10010011 3
b00010101 5
#12
b00000000000000000000000000010100 &
b00000000000101011000010110010011 (
b00000000000000000000000000000001 /
b00010100 2
b11100011 3
b10011100 4
b01100101 5
b11111110 6
#14
b11 #
b01 $
b01 %
b00000000000000000000000000011000 &
b11111110011001011001110011100011 (
0)
b001 +
0-
1.
b11111111111111111111111111111000 /
b1100011 0
b001 1
b00011000 2
b00011000 4
b00000011 5
#16
b00000000000000000000000000011100 &
b11111110000000110001100011100011 (
b11111111111111111111111111110000 /
b00011100 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
#18
b00 #
b00 $
b00 %
b00000000000000000000000000100000 &
b00000000000000000000000000000000 (
1)
b000 +
1-
0.
b00000000000000000000000000000000 /
b0000000 0
b000 1
b00100000 2
