$version Generated by VerilatedVcd $end
$date Thu Nov 30 11:25:13 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 V a0 [31:0] $end
  $var wire  3 X aluctrl2 [2:0] $end
  $var wire  1 T clk $end
  $var wire 32 W instr2 [31:0] $end
  $var wire 32 Y pc2 [31:0] $end
  $var wire  1 U rst $end
  $scope module cpu $end
   $var wire  3 [ ALUctrl [2:0] $end
   $var wire  1 # ALUsrc $end
   $var wire 32 Z DATA_WIDTH [31:0] $end
   $var wire  1 ' EQ $end
   $var wire 32 % ImmOp [31:0] $end
   $var wire 32 & Instr [31:0] $end
   $var wire 32 ( PC [31:0] $end
   $var wire  1 $ PCsrc $end
   $var wire  1 # RegWrite $end
   $var wire 32 V a0 [31:0] $end
   $var wire  3 X aluctrl2 [2:0] $end
   $var wire  1 T clk $end
   $var wire 32 W instr2 [31:0] $end
   $var wire 32 Y pc2 [31:0] $end
   $var wire  1 U rst $end
   $scope module Myblue $end
    $var wire 32 % ImmOp [31:0] $end
    $var wire  1 $ PCsrc $end
    $var wire 32 Z WIDTH [31:0] $end
    $var wire  1 T clk $end
    $var wire 32 ) next_PC [31:0] $end
    $var wire 32 * pc [31:0] $end
    $var wire 32 ( pc_out [31:0] $end
    $var wire 32 Y pc_out2 [31:0] $end
    $var wire  1 U rst $end
    $scope module pc_mux $end
     $var wire 32 % ImmOp [31:0] $end
     $var wire  1 $ PCsrc $end
     $var wire 32 Z WIDTH [31:0] $end
     $var wire 32 ) next_PC [31:0] $end
     $var wire 32 * pc [31:0] $end
    $upscope $end
    $scope module pc_reg $end
     $var wire 32 Z WIDTH [31:0] $end
     $var wire 32 ( another_pc [31:0] $end
     $var wire 32 Y another_pc2 [31:0] $end
     $var wire  1 T clk $end
     $var wire 32 ) next_PC [31:0] $end
     $var wire 32 * pc [31:0] $end
     $var wire  1 U rst $end
    $upscope $end
   $upscope $end
   $scope module Mygreen $end
    $var wire  3 [ ALUctrl [2:0] $end
    $var wire  1 # ALUsrc $end
    $var wire 32 Z DATA_WIDTH [31:0] $end
    $var wire  1 ' EQ $end
    $var wire 32 % ImmOp [31:0] $end
    $var wire  2 + ImmSrc [1:0] $end
    $var wire 32 ( PC [31:0] $end
    $var wire  1 $ PCsrc $end
    $var wire  1 # RegWrite $end
    $var wire 32 & instr [31:0] $end
    $var wire 32 W instr2 [31:0] $end
    $scope module MyControlUnit $end
     $var wire  3 [ ALUctrl [2:0] $end
     $var wire  1 # ALUsrc $end
     $var wire 32 Z DATA_WIDTH [31:0] $end
     $var wire  1 ' EQ $end
     $var wire  2 + ImmSrc [1:0] $end
     $var wire  1 $ PCsrc $end
     $var wire  1 # RegWrite $end
     $var wire 32 & instr [31:0] $end
     $var wire 32 W instr2 [31:0] $end
     $var wire  7 , opcode [6:0] $end
    $upscope $end
    $scope module MyInstrMem $end
     $var wire 32 \ ADDRESS_WIDTH [31:0] $end
     $var wire 32 Z DATA_WIDTH [31:0] $end
     $var wire 32 ( addr [31:0] $end
     $var wire 32 & dout [31:0] $end
    $upscope $end
    $scope module MySignExtend $end
     $var wire 32 Z DATA_WIDTH [31:0] $end
     $var wire 32 % ImmOp [31:0] $end
     $var wire  2 + ImmSrc [1:0] $end
     $var wire 32 & instr [31:0] $end
    $upscope $end
   $upscope $end
   $scope module Myred $end
    $var wire  3 [ ALUctrl [2:0] $end
    $var wire 32 . ALUop1 [31:0] $end
    $var wire 32 / ALUop2 [31:0] $end
    $var wire 32 - ALUout [31:0] $end
    $var wire  1 # ALUsrc $end
    $var wire 32 Z DATA_WIDTH [31:0] $end
    $var wire  1 ' EQ $end
    $var wire 32 % ImmOp [31:0] $end
    $var wire 32 & Instr [31:0] $end
    $var wire  1 # RegWrite $end
    $var wire 32 V a0 [31:0] $end
    $var wire  3 X aluctrl2 [2:0] $end
    $var wire  1 T clk $end
    $var wire 32 0 regOp2 [31:0] $end
    $scope module ALU $end
     $var wire  3 [ ALUctrl [2:0] $end
     $var wire 32 . ALUop1 [31:0] $end
     $var wire 32 / ALUop2 [31:0] $end
     $var wire 32 Z DATA_WIDTH [31:0] $end
     $var wire  1 ' EQ $end
     $var wire 32 - SUM [31:0] $end
     $var wire  3 X aluctrl2 [2:0] $end
    $upscope $end
    $scope module ALUMux $end
     $var wire 32 / ALUop2 [31:0] $end
     $var wire  1 # ALUsrc $end
     $var wire 32 Z DATA_WIDTH [31:0] $end
     $var wire 32 % ImmOp [31:0] $end
     $var wire 32 0 regOp2 [31:0] $end
    $upscope $end
    $scope module register $end
     $var wire 32 ] ADDRESS_WIDTH [31:0] $end
     $var wire 32 Z DATA_WIDTH [31:0] $end
     $var wire 32 & Instr [31:0] $end
     $var wire 32 . RD1 [31:0] $end
     $var wire 32 0 RD2 [31:0] $end
     $var wire 32 - WD3 [31:0] $end
     $var wire  1 # WE3 $end
     $var wire 32 V a0 [31:0] $end
     $var wire  1 T clk $end
     $var wire  5 3 rd [4:0] $end
     $var wire 32 4 reg_array[0] [31:0] $end
     $var wire 32 > reg_array[10] [31:0] $end
     $var wire 32 ? reg_array[11] [31:0] $end
     $var wire 32 @ reg_array[12] [31:0] $end
     $var wire 32 A reg_array[13] [31:0] $end
     $var wire 32 B reg_array[14] [31:0] $end
     $var wire 32 C reg_array[15] [31:0] $end
     $var wire 32 D reg_array[16] [31:0] $end
     $var wire 32 E reg_array[17] [31:0] $end
     $var wire 32 F reg_array[18] [31:0] $end
     $var wire 32 G reg_array[19] [31:0] $end
     $var wire 32 5 reg_array[1] [31:0] $end
     $var wire 32 H reg_array[20] [31:0] $end
     $var wire 32 I reg_array[21] [31:0] $end
     $var wire 32 J reg_array[22] [31:0] $end
     $var wire 32 K reg_array[23] [31:0] $end
     $var wire 32 L reg_array[24] [31:0] $end
     $var wire 32 M reg_array[25] [31:0] $end
     $var wire 32 N reg_array[26] [31:0] $end
     $var wire 32 O reg_array[27] [31:0] $end
     $var wire 32 P reg_array[28] [31:0] $end
     $var wire 32 Q reg_array[29] [31:0] $end
     $var wire 32 6 reg_array[2] [31:0] $end
     $var wire 32 R reg_array[30] [31:0] $end
     $var wire 32 S reg_array[31] [31:0] $end
     $var wire 32 7 reg_array[3] [31:0] $end
     $var wire 32 8 reg_array[4] [31:0] $end
     $var wire 32 9 reg_array[5] [31:0] $end
     $var wire 32 : reg_array[6] [31:0] $end
     $var wire 32 ; reg_array[7] [31:0] $end
     $var wire 32 < reg_array[8] [31:0] $end
     $var wire 32 = reg_array[9] [31:0] $end
     $var wire  5 2 rs1 [4:0] $end
     $var wire  5 1 rs2 [4:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
1'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00 +
b0000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000 1
b00000 2
b00000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
0T
0U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000100000 Z
b000 [
b00000000000000000000000000001000 \
b00000000000000000000000000000101 ]
#1
b00000000000000000000000011111111 %
b00001111111100000000001100010011 &
0'
b00000000000000000000000000000100 )
b01 +
b0010011 ,
b00000000000000000000000011111111 -
b00000000000000000000000011111111 /
b11111 1
b00110 3
1T
b00001111111100000000001100010011 W
#2
0T
#3
b00000000000000000000000000000000 %
b00000000000000000000010100010011 &
1'
b00000000000000000000000000000100 (
b00000000000000000000000000001000 )
b00000000000000000000000000000100 *
b00000000000000000000000000000000 -
b00000000000000000000000000000000 /
b00000 1
b01010 3
b00000000000000000000000011111111 :
1T
b00000000000000000000010100010011 W
b00000000000000000000000000000100 Y
#4
0T
#5
b00000000000000000000010110010011 &
b00000000000000000000000000001000 (
b00000000000000000000000000001100 )
b00000000000000000000000000001000 *
b01011 3
1T
b00000000000000000000010110010011 W
b00000000000000000000000000001000 Y
#6
0T
#7
b00000000000001011000010100010011 &
b00000000000000000000000000001100 (
b00000000000000000000000000010000 )
b00000000000000000000000000001100 *
b01011 2
b01010 3
1T
b00000000000001011000010100010011 W
b00000000000000000000000000001100 Y
#8
0T
#9
b00000000000000000000000000000001 %
b00000000000101011000010110010011 &
0'
b00000000000000000000000000010000 (
b00000000000000000000000000010100 )
b00000000000000000000000000010000 *
b00000000000000000000000000000001 -
b00000000000000000000000000000001 /
b00001 1
b01011 3
1T
b00000000000101011000010110010011 W
b00000000000000000000000000010000 Y
#10
0T
#11
0#
1$
b11111111111111111111111111111000 %
b11111110011001011001110011100011 &
1'
b00000000000000000000000000010100 (
b00000000000000000000000000001100 )
b00000000000000000000000000010100 *
b11 +
b1100011 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 /
b00110 1
b11001 3
b00000000000000000000000000000001 ?
1T
b11111110011001011001110011100011 W
b00000000000000000000000000010100 Y
#12
0T
#13
1#
0$
b00000000000000000000000000000000 %
b00000000000001011000010100010011 &
0'
b00000000000000000000000000001100 (
b00000000000000000000000000010000 )
b00000000000000000000000000001100 *
b01 +
b0010011 ,
b00000000000000000000000000000001 -
b00000000000000000000000000000001 .
b00000000000000000000000011111111 0
b00000 1
b01010 3
1T
b00000000000001011000010100010011 W
b00000000000000000000000000001100 Y
#14
0T
#15
b00000000000000000000000000000001 %
b00000000000101011000010110010011 &
1'
b00000000000000000000000000010000 (
b00000000000000000000000000010100 )
b00000000000000000000000000010000 *
b00000000000000000000000000000010 -
b00000000000000000000000000000001 /
b00000000000000000000000000000000 0
b00001 1
b01011 3
b00000000000000000000000000000001 >
1T
b00000000000101011000010110010011 W
b00000000000000000000000000010000 Y
#16
0T
#17
0#
b11111111111111111111111111111000 %
b11111110011001011001110011100011 &
0'
b00000000000000000000000000010100 (
b00000000000000000000000000011000 )
b00000000000000000000000000010100 *
b11 +
b1100011 ,
b00000000000000000000000000000001 -
b00000000000000000000000000000000 /
b00110 1
b11001 3
b00000000000000000000000000000010 ?
1T
b11111110011001011001110011100011 W
b00000000000000000000000000010100 Y
#18
0T
#19
1#
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000011000 (
b00000000000000000000000000011100 )
b00000000000000000000000000011000 *
b00 +
b0000000 ,
b00000000000000000000000000000010 -
b00000000000000000000000000000010 .
b00000000000000000000000011111111 0
b00000 1
b00000 2
b00000 3
1T
b00000000000000000000000000000000 W
b00000000000000000000000000011000 Y
